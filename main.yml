#
# podman is group of target hosts, in this example podman01 and podman02
---
- hosts: podman
  vars:
    minimal_ansible_distribution_major_version: 8
    tz: Europe/Amsterdam
    pv: sdb
    vg: vg01
    lv: data
    mp: "/container-data"  # MountPoint
    graphroot: "{{ mp }}/var/lib/containers/storage"
  roles:
    - role: arikkert.nrpe_check_podman
      when: containers is defined or pods is defined
    - role: arikkert.postfix_nullclient

  # First (pre) configure the hosts
  # After that use roles to add special features
  pre_tasks:

    - name: Ensure target OS is supported
      ansible.builtin.fail:
        msg: "Playbook only suitable/tested for CentOS {{ mimimal_ansible_distribution_major_version }} or higher"
      when: ansible_os_family != "RedHat" or (ansible_distribution_major_version | int) < minimal_ansible_distribution_major_version

    - name: ensure repos can be found
      ansible.builtin.include_role:
        name: arikkert.centos8repo
      when: ansible_distribution == "CentOS" and (ansible_distribution_major_version | int) == 8

    #
    # podman itself
    #

    - name: ensure podman is installed
      ansible.builtin.yum:
        name: podman

    - name: ensure podman version is detected
      ansible.builtin.shell: podman --version
      register: podman_version
      changed_when: false
      check_mode: false

    - name: ensure podman version is shown
      ansible.builtin.debug:
        msg: "{{ podman_version.stdout.split('\n') }}"

    - name: ensure user podman is installed
      ansible.builtin.user:
        name: podman

    #
    # podman-compose
    #

    - name: relabel needed for this (vagrant) box and timezone
      ansible.builtin.command: restorecon -v /etc/localtime
      register: command
      changed_when: '"Relabeled" in command.stdout'

    - name: ensure epel is installed
      ansible.builtin.command:
        cmd: dnf install -y epel-release
        creates: /etc/yum.repos.d/epel.repo

    - name: ensure podman-compose is installed
      ansible.builtin.yum:
        name: podman-compose

    - name: ensure podman-compose version is detected
      ansible.builtin.shell: /bin/podman-compose version
      register: podmancompose_version
      changed_when: false
      check_mode: false

    - name: ensure podman-compose version is shown
      ansible.builtin.debug:
        msg: "{{ podmancompose_version.stdout.split('\n') }}"

    #
    # continue
    #

    - name: ensure .ssh dir exists
      ansible.builtin.file:
        path: /home/podman/.ssh
        state: directory
        mode: 0700
        owner: podman
        group: podman

    - name: ensure ssh key pair exists
      become: true
      become_user: podman
      community.crypto.openssh_keypair:
        path: "~/.ssh/id_rsa"
        owner: podman
        group: podman

    - name: ensure dirs exist, group stuff together
      become: true
      become_user: podman
      ansible.builtin.file:
        path: /home/podman/{{ item }}
        state: directory
        mode: 0755
      loop:
        - podman
        - podman_compose

    - name: ensure sudo is installed
      ansible.builtin.package:
        name: sudo

    - name: ensure user podman can have elevated privileges
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/sudoers.d/
        mode: '0440'
        validate: visudo -cf %s
      loop:
        - 10_podman

    # Create storage for persistent container data

    - name: ensure VG deps are installed
      ansible.builtin.yum:
        name: lvm2

    - name: ensure VG exists
      ansible.builtin.lvg:
        pvs: /dev/{{ pv }}
        vg: "{{ vg }}"

    - name: ensure LV exists
      ansible.builtin.lvol:
        vg: "{{ vg }}"
        lv: "{{ lv }}"
        size: 40G
        pvs: /dev/{{ pv }}

    - name: ensure FS exists
      ansible.builtin.filesystem:
        fstype: xfs
        dev: /dev/mapper/{{ vg }}-{{ lv }}

    - name: ensure MP (mountpoint) exists
      ansible.builtin.file:
        path: "{{ mp }}"
        state: directory
        owner: podman
        group: podman
        mode: 0755

    - name: mount
      ansible.builtin.mount:
        path: "{{ mp }}"
        src: /dev/mapper/{{ vg }}-{{ lv }}
        fstype: xfs
        state: mounted

    - name: show
      ansible.builtin.debug:
        msg: "{{ graphroot }}"

    - name: ensure container storage directory is present
      ansible.builtin.file:
        path: "{{ graphroot }}"
        state: directory

    # https://ahelpme.com/software/podman/change-the-location-of-container-storage-in-podman-with-selinux-enabled/
    # om default container storage uit OS image te halen, anders ben je afhankelijk bijv als je vagrant boxes gebruikt
    #
    # nog uitzoeken hoe dit beetje mooier kan
    # Gaat erom dat de nieuwe locatie de juiste fcontext heeft en idempotent
    - name: ensure selinux fcontext is saved in fcontext db
      ansible.builtin.command: "semanage fcontext -a -e /var/lib/containers {{ mp }}/var/lib/containers"
      register: result
      changed_when: '"already exists" not in result.stderr'
      failed_when: false

    - name: ensure selinux perms is applied as set in fcontext db
      ansible.builtin.command: "restorecon -R {{ mp }}/var/lib/containers"
      when: '"already exists" not in result.stderr'

    - name: ensure the new container storage is used
      ansible.builtin.lineinfile:
        path: /etc/containers/storage.conf
        regexp: '^graphroot = '
        line: graphroot = "{{ graphroot }}"
        backup: true

    #
    # git
    #

    - name: ensure git is installed
      ansible.builtin.yum:
        name: git

    - name: relabel needed for this (vagrant) box and timezone
      ansible.builtin.command: restorecon -v /etc/localtime
      register: command
      changed_when: '"Relabeled" in command.stdout'

    - name: TZ {{ tz }}
      community.general.timezone:
        name: "{{ tz }}"

    #
    # helpers
    #

    - name: ensure yamllint is installed
      ansible.builtin.yum:
        name: "{{ item }}"
      loop:
        - yamllint

    # sources on git clone https://github.com/fboender/multi-git-status.git
    # I patched this version to support old git and locks
    - name: ensure mgitstatus is installed
      ansible.builtin.copy:
        src: mgitstatus
        dest: /usr/local/bin/
        mode: 0755

    - name: ensure mgitstatus manpage is installed
      ansible.builtin.copy:
        src: mgitstatus.1.gz
        dest: /usr/share/man/man1/
        mode: 0644

    #
    # cockpit (podman UI)
    #

    - name: ensure cockpit is installed
      ansible.builtin.dnf:
        name:
          - cockpit
          - cockpit-podman

    - name: ensure cockpit is running
      ansible.builtin.service:
        name: cockpit.socket
        enabled: true
        state: started

    #
    # firewall
    #

    - name: ensure firewall is running
      ansible.builtin.service:
        name: firewalld
        enabled: true
        state: started
...
